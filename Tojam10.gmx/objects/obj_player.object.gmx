<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_air</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>par_player</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
event_inherited();
hp = 10;
maxHp = 10;
attClock = 0;
curAttack = 0;
hurtClock = 0;

get_player_sprite(self);
image_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fighting

//Attacking



//Getting Hurt
if(hurtClock &gt; 0){
    visible = !visible;
    hurtClock -= 1;
}else{
    visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites
event_inherited();
if(inAir == false &amp;&amp; keyboard_check(kRight) == keyboard_check(kLeft) &amp;&amp; sprite_index != spr_player_stand){
    sprite_index = standing_sprite;
    image_index = 0;
}
if(inAir == false &amp;&amp; keyboard_check(kRight) != keyboard_check(kLeft) &amp;&amp; sprite_index != spr_player_run){
    sprite_index = running_sprite;
    image_index = 0;
}
if(inAir == true){
    sprite_index = jumping_sprite;
    if(vspd &lt;= -1){
        image_index = 0;
    }else if(vspd &gt;= 1){
        image_index = 2;
    }else{
        image_index = 1;
    }
}

//Attacking
if(attClock &gt; 0 &amp;&amp; curAttack == 0){
   // sprite_index = spr_player_fight;
   // image_index = 14-(attClock);
    attClock -= 1;
}

//Direction
if(hspd &gt; 0){
    image_xscale = 1;
}else if(hspd &lt; 0){
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

//jumping
jumping = keyboard_check(kJump) || global.upMove;
if(jumping &amp;&amp; inAir == false){
   vspd = -15;
}
//left and right movement
movingRight = keyboard_check(kRight) || global.rightMove;
movingLeft = keyboard_check(kLeft) || global.leftMove;

if(movingRight &amp;&amp; !movingLeft &amp;&amp; hspd &lt; 10){
    hspd = min(hspd+2, 10);
}
if(movingLeft &amp;&amp; !movingRight &amp;&amp; hspd &gt; -10){
    hspd = max(hspd-2, -10);
}

//attacking
if keyboard_check(kAction) &amp;&amp; attClock == false {
 attClock = 14;
 curAttack = 0;
 with instance_create(x,y,par_attack) {
  sprite_index = mask_player_attack;
  owner = par_player;
  image_xscale = other.image_xscale;
 }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check stats
global.hp = hp;
if(hp &lt;= 0){
      global.hp = 0;
      alert = instance_create(self.x, self.y, par_alert);
      alert.alertType = global.DEATH;
      instance_destroy();
}else if(hp &gt; maxHp){
    hp = maxHp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_glow_ring">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create alert, add points, play sound

//Audio
if(global.sfx_on){
    audio_play_sound(aud_collectable, 10, false);
}

//Alert
alert = instance_create(self.x, self.y, par_alert);
alert.alertType = global.GLOWRING;

//Increase stats
global.points += 100;
global.glowRings += 1;

//Destroy glowring
with(other){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cheese">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gain health, destroy cheese
alert = instance_create(self.x, self.y, par_alert);
alert.alertType = global.CHEESE;
hp += 1;
global.points += 10;
with(other){
    instance_destroy();
}

//Audio
if(global.sfx_on){
    audio_play_sound(aud_collectable, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(roo_level_select);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_slime">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hurt
if hurtClock == 0 &amp;&amp; other.hurtClock == 0 &amp;&amp; sign(x-other.x) == other.image_xscale {
 hp -= 1;
 hurtClock = 30;
 vspd = -8;
 hspd = sign(x-other.x)*16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_beetle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hurt
if !vspd &gt; 0 &amp;&amp; hurtClock == 0 &amp;&amp; other.hurtClock == 0 &amp;&amp; sign(x-other.x) == other.image_xscale {
 hp -= 1;
 hurtClock = 30;
 vspd = -8;
 hspd = sign(x-other.x)*16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hurt
if(hurtClock == 0) {
 hp -= 1;
 hurtClock = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_hazard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If there is no current alert, add a sick alert and take health

if(!instance_exists(par_alert)){
    hp -= 1;  
    if(hp &gt; 0){
          alert = instance_create(self.x, self.y, par_alert);
          alert.alertType = global.SICK;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
