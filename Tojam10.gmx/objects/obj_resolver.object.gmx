<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_results</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///compile all the information, call the scripts, figure out the answer
audio_stop_all();
required_notes = get_required_notes();
requiredLength = array_length_1d(required_notes);

//get the selected notes
selectedIterator = 0;
for (var i = 0; i &lt; global.NUMKEYS; i++;){
    if(global.KEYS[i] &gt; 0){
        keyValue = get_keys_value(i);
        selectedNotes[selectedIterator] = keyValue;
        selectedIterator ++;     
    }
}
selectedLength = 0
if(selectedIterator &gt; 0){
    selectedLength = array_length_1d(selectedNotes);
}


//compare values
roundScore = 0;
scoreValuePerNote = 25;
totalScoreValue = (requiredLength + 1) * scoreValuePerNote;

//How many required notes were selected
if(selectedLength &gt; 0){
    for(j = 0; j &lt;= requiredLength; j++){
        valueToFind = required_notes[j,0]
        found = is_value_in_array(valueToFind, selectedNotes);
        if(found){
            roundScore += scoreValuePerNote;  
        }
    }
}

button = instance_create(x + 350, y + 250, obj_global_button);
button.buttonLevel = global.BUTTON_REPLAY;

/*
Advanced players will lose points for incorrect notes
//How many incorrect notes were selected
for(k = 0; k &lt; selectedLength; k++){
    found = is_value_in_array(selectedNotes[k], required_notes);
    if(!found){
    //    roundScore -= scoreValuePerNote;  
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the results
draw_set_font(fon_hud);
draw_set_color(c_black);
//notes required
requiredHeadingY = y + 20;
requiredHeadingX = x + 50;
draw_text(requiredHeadingX,         requiredHeadingY,   "Required");

requiredNotesY = requiredHeadingY;
requiredNotesX = requiredHeadingX + 100;
for(i = 0; i &lt; array_height_2d(required_notes); i++){
    noteName = get_note_name(required_notes[i, 0])
    modifier = get_modifier(required_notes[i, 1]);
    draw_text(requiredNotesX,       requiredNotesY + i*25,  required_notes[i, 0]);
    draw_text(requiredNotesX + 50,  requiredNotesY + i*25,  noteName); 
    draw_text(requiredNotesX + 70,  requiredNotesY + i*25,  modifier);
}

//notes chosen
chosenY = y + 125;
chosenX = x + 50;
draw_text(chosenX, chosenY ,"You chose: ");
iterator = 0;
for (j = 0; j &lt; selectedLength; j++){
    noteName = get_note_name(selectedNotes[j])
    draw_text(chosenX + 100,     chosenY  + j*25,    selectedNotes[j]);
    draw_text(chosenX + 150,     chosenY  + j*25,    noteName);  
}

//Score
scoreY = y + 250;
scoreX = x + 250;
draw_text(scoreX, scoreY, roundScore);  
draw_text(scoreX + 25, scoreY, " / ");
draw_text(scoreX + 50, scoreY, totalScoreValue);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
